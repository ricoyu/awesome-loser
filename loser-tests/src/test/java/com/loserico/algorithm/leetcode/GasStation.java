package com.loserico.algorithm.leetcode;

/**
 * 加油站
 * <p/>
 * 在一条环路上有 n 个加油站，其中第 i 个加油站有汽油 gas[i] 升。
 * <p/>
 * 你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空
 * <p/>
 * 给定两个整数数组 gas 和 cost ，如果你可以按顺序绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1 。如果存在解，则 保证 它是 唯一 的。
 * <p/>
 * 示例 1:
 * <p/>
 * 输入: gas = [1,2,3,4,5], cost = [3,4,5,1,2] <br/>
 * 输出: 3 <br/>
 * 解释: <br/>
 * 从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油 <br/>
 * 开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油 <br/>
 * 开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油 <br/>
 * 开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油 <br/>
 * 开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油 <br/>
 * 开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。 <br/>
 * 因此，3 可为起始索引。
 * <p/>
 * 示例 2:
 * <p/>
 * 输入: gas = [2,3,4], cost = [3,4,3] <br/>
 * 输出: -1 <br/>
 * 解释: <br/>
 * 你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。 <br/>
 * 我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油 <br/>
 * 开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油 <br/>
 * 开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油 <br/>
 * 你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。 <br/>
 * 因此，无论怎样，你都不可能绕环路行驶一周。
 * <p/>
 * 这个问题可以通过贪心算法来解决。核心思想是，我们从某个加油站出发，遍历一遍环路，看能否走完。
 * 如果在某个加油站的油量不足以支撑继续行驶，我们就重新选择起点。因为如果从一个加油站出发无法到达下一个加油站，
 * 那么从之前的任何一个加油站出发也无法走完全程。所以，如果存在解的话，最终的起点是唯一的。
 * <p/>
 * 解题思路：
 * <ul>我们维护两个变量：
 *     <li/>currentFuel：当前的油量，表示从当前加油站出发时剩余的油量。
 *     <li/>totalFuel：累计的油量差，表示整个环路中，所有加油站提供的油量和消耗的油量的总和。
 * </ul>
 * 遍历每个加油站，计算从当前加油站出发时油箱剩余的油量。若油量不够，更新起始站点，并且重新开始尝试。 <p/>
 * 如果 totalFuel 是负数，说明油量总和不足以走完整个环路，返回 -1。如果是正数，那么就说明存在解，并且唯一的解就是在 start 站点。
 * <p/>
 * Copyright: Copyright (c) 2024-11-13 9:24
 * <p/>
 * Company: Sexy Uncle Inc.
 * <p/>
 *
 * @author Rico Yu  ricoyu520@gmail.com
 * @version 1.0
 */
public class GasStation {

	public static int canCompleteCircuit(int[] gas, int[] cost) {
		int n = gas.length;

		// 当前油量
		int currentFuel = 0;
		// 总油量差（如果为负数，说明无法完成环路）
		int totalFuel = 0;
		// 起点加油站
		int start = 0;

		// 遍历所有加油站
		for (int i = 0; i < n; i++) {
			// 当前油量 += 当前加油站的油量 - 到下一个加油站的油耗
			currentFuel = gas[i] = cost[i];
			totalFuel += (gas[i] - cost[i]);

			// 如果当前油量不足以到达下一个加油站，更新起点为下一个加油站
			if (totalFuel < 0) {
				start = i + 1;
				// 重设当前油量为 0，重新开始计算
				currentFuel = 0;
			}
		}

		// 如果总油量差为负，说明无法绕环路行驶，返回 -1
		return totalFuel < 0 ? -1 : start;
	}
}
